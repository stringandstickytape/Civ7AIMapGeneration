[This file contains supporting information generated by AI]
Below is a list of the “ground‐rules” (or constraints) that every Civilization 7 map must obey. In other words, regardless of which “map type” is chosen (archipelago, continents, continents‑plus, fractal, terra‑incognita, or shuffle), the engine always makes sure that the following conditions are met:

1. • Map Initialization and Geometry  
  – A fixed grid size is provided (width, height) along with latitude information (top and bottom latitudes) and wrapping flags.  
  – A “map size” (which determines things like the number of players per landmass, overall water–land ratio, etc.) is looked up and used to set key parameters.

2. • Global Water and Polar Boundaries  
  – A set number of “polar water rows” appear at the north and south edges.  
  – There are fixed “ocean water columns” along the sides so that even when landmasses are carved out, a defined buffer of ocean remains.  
  – The overall “water percent” (usually defined in globals) is observed when converting fractal noise into a water/land cutoff.

3. • Fractal-Driven Landmass Generation  
  – The engine always “starts” with a fractal (or series of fractal) calculations that determine the “height” value at each plot.  
  – A threshold (based on the water percentage) is used so that plots below the threshold remain water and those above become land.  
  – In some map types (for example, archipelago) multiple fractal layers are applied in sequence so that isolated islands or “patches” of land are generated.

4. • Coastline & Plot Tagging Consistency  
  – Once the base terrain is laid down, every plot is tagged appropriately: for instance, coastal plots (adjacent to water) are given “coast” tags, islands get an “island” tag, and so on.  
  – These plot tags (such as WATER, ISLAND, EAST_WATER, WEST_WATER, LANDMASS) are then used by later steps (rivers, features, resources) to know what can or cannot be done.

5. • Elevation, Hills, and Mountains  
  – Non‐water plots have their elevation “built” (using the fractal height value plus adjustments based on proximity to the center of the continent and to “start sectors”).  
  – If a plot’s fractal value is high enough, it is converted into a mountain.  
  – A separate pass evaluates adjacent elevation differences (the “hill score”) and converts some flat plots into hills where the slope is steep.
  – Volcanoes are treated as a special type of mountain and can only appear under additional constraints (for example, near continent boundaries, not completely surrounded by other mountains, and with a probability proportional to local terrain conditions).

6. • River Modeling  
  – After terrain and elevation are built and “fixed,” rivers are modeled.  
  – There are rules dictating how many rivers, their “navigability” (using a specific terrain type), and that they must follow a realistic downhill path.
  – Named rivers (the ones that are significant in the game) are further defined once the basic terrain is in place.

7. • Biome Assignment  
  – Every land plot is assigned one of the game’s valid biomes (plains, desert, tropical, grassland, tundra, etc.).  
  – The biomechanics are decided based on factors such as:  
   – The plot’s “latitude” (adjusted by elevation and rainfall)  
   – Whether it is near a river (or on a river)  
  – Global thresholds (for example, a tropical biome is used below a certain latitude if rainfall is high; tundra is assigned when it’s very far north or high–up, etc.)

8. • Feature and Special Plot Generation  
  – The engine then “sprinkles” features (such as forests, marshes, ruins, campfires, or even wonders) onto non‑water, passable plots.  
  – Each feature has its own rules (for example, whether it’s allowed adjacent to a river, on a coast, or only in “isolated” interior regions) and a “placement density” that determines its chance of appearing.  
  – A two‑pass process is common: one pass for more “positional” (deterministic) placement and one for “scattered” (random) features.

9. • Resource Distribution  
  – Resources are not simply placed everywhere; first a Poisson noise map is generated and then candidate plots are chosen.  
  – A resource’s “weight” and “hemisphere” (i.e. whether it is more common on the primary side of the map or not) are taken into account.  
  – In addition, a resource can only be placed on a plot that meets conditions (for example, not being water, not having an existing feature or natural wonder, and—in many cases—not being too near a player start).

10. • Discovery Placement  
  – Discoveries (the bonus events that can be uncovered by the player) are also placed according to a Poisson‐distributed sample.  
  – They are only placed on plots that are not already “owned” or have certain terrain (such as water, impassable, or adjacent to major features) and are placed only if they are not too near any player’s starting position.

11. • Start Position Rules  
  – When it comes time to assign player start locations, the engine divides the map into “sectors” and uses preset valid‐configurations (which vary based on the number of players on each side).  
  – Rules enforce that a player’s start must be sufficiently separated from another (using both a “required” and a “desired” buffer distance) and that any advanced-start region has been fairly built via scoring (with good terrain receiving bonuses and being too close to another’s start receiving penalties).  
  – This guarantees that starting positions are well distributed across the available landmasses.

12. • Consistent Use of Global Settings  
  – Every phase uses global parameters defined in the “map‑globals” file (for example, the fractal weights, water percentage, rainfall standards, minimum buffers, etc.) to tune both randomness and structure.  
  – This ensures that while different methods may “decorate” the map differently (archipelago versus continents, etc.), they all conform to an overall balance of water/land and fair start placements.

13. • Recalculation and Validation  
  – After major phases (such as landmass generation, coast expansion, or resource/feature placement), the engine “recalculates areas” and “validates” terrain so that inconsistencies (from steep elevation transitions or overlapping effects) are fixed.
  – This ensures the final output is a cohesive, playable map.

In summary, whether you generate a cluster of islands, large paired continents, a “fractal” patchwork, a two‑part (terra incognita) layout, or even a “shuffle” that randomly picks among these methods—the map generator always enforces that:  
 • the overall grid and physical boundaries are correct (with poles, oceans, and continents),  
 • land is built using fractal and elevation rules with proper thresholds,  
 • biomes, features, resources, and discoveries are placed only on valid, non‐conflicting plots, and  
 • starting positions are fairly distributed with the required buffers and quality criteria.

These are the central “rules” that every Civ 7 map must follow to be both balanced and visually coherent.

The map must be divided, using eight coastal/ocean tiles, into two or more separate areas.  It must not be possible to cross from one to any other, without traversing eight coastal/ocean tiles, including wrapping around the East/West edges of the map.